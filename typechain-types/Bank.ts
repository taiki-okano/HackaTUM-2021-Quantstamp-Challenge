/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BankInterface extends utils.Interface {
  functions: {
    "borrow(address,uint256)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "ethMagic()": FunctionFragment;
    "getBalance(address)": FunctionFragment;
    "getCollateralRatio(address,address)": FunctionFragment;
    "hakToken()": FunctionFragment;
    "liquidate(address,address)": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "repay(address,uint256)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "borrow",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ethMagic", values?: undefined): string;
  encodeFunctionData(functionFragment: "getBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getCollateralRatio",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "hakToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ethMagic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hakToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Borrow(address,address,uint256,uint256)": EventFragment;
    "Deposit(address,address,uint256)": EventFragment;
    "Liquidate(address,address,address,uint256,uint256)": EventFragment;
    "Repay(address,address,uint256)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type BorrowEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    _from: string;
    token: string;
    amount: BigNumber;
    newCollateralRatio: BigNumber;
  }
>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export type DepositEvent = TypedEvent<
  [string, string, BigNumber],
  { _from: string; token: string; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type LiquidateEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    liquidator: string;
    accountLiquidated: string;
    collateralToken: string;
    amountOfCollateral: BigNumber;
    amountSentBack: BigNumber;
  }
>;

export type LiquidateEventFilter = TypedEventFilter<LiquidateEvent>;

export type RepayEvent = TypedEvent<
  [string, string, BigNumber],
  { _from: string; token: string; remainingDebt: BigNumber }
>;

export type RepayEventFilter = TypedEventFilter<RepayEvent>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  { _from: string; token: string; amount: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Bank extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BankInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrow(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethMagic(overrides?: CallOverrides): Promise<[string]>;

    getBalance(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getCollateralRatio(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hakToken(overrides?: CallOverrides): Promise<[string]>;

    liquidate(
      token: string,
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    repay(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  borrow(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    token: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethMagic(overrides?: CallOverrides): Promise<string>;

  getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getCollateralRatio(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hakToken(overrides?: CallOverrides): Promise<string>;

  liquidate(
    token: string,
    account: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  repay(
    token: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    borrow(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ethMagic(overrides?: CallOverrides): Promise<string>;

    getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralRatio(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hakToken(overrides?: CallOverrides): Promise<string>;

    liquidate(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    repay(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Borrow(address,address,uint256,uint256)"(
      _from?: string | null,
      token?: string | null,
      amount?: null,
      newCollateralRatio?: null
    ): BorrowEventFilter;
    Borrow(
      _from?: string | null,
      token?: string | null,
      amount?: null,
      newCollateralRatio?: null
    ): BorrowEventFilter;

    "Deposit(address,address,uint256)"(
      _from?: string | null,
      token?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      _from?: string | null,
      token?: string | null,
      amount?: null
    ): DepositEventFilter;

    "Liquidate(address,address,address,uint256,uint256)"(
      liquidator?: string | null,
      accountLiquidated?: string | null,
      collateralToken?: string | null,
      amountOfCollateral?: null,
      amountSentBack?: null
    ): LiquidateEventFilter;
    Liquidate(
      liquidator?: string | null,
      accountLiquidated?: string | null,
      collateralToken?: string | null,
      amountOfCollateral?: null,
      amountSentBack?: null
    ): LiquidateEventFilter;

    "Repay(address,address,uint256)"(
      _from?: string | null,
      token?: string | null,
      remainingDebt?: null
    ): RepayEventFilter;
    Repay(
      _from?: string | null,
      token?: string | null,
      remainingDebt?: null
    ): RepayEventFilter;

    "Withdraw(address,address,uint256)"(
      _from?: string | null,
      token?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      _from?: string | null,
      token?: string | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    borrow(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethMagic(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralRatio(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hakToken(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      token: string,
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    repay(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrow(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethMagic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralRatio(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hakToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      token: string,
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repay(
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
